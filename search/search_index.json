{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to fakemap","text":"<p>Python Boilerplate contains all the boilerplate you need to create a Python package.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://MattAGUT.github.io/fakemap</li> </ul>"},{"location":"#purpose","title":"Purpose","text":"<ul> <li>fakemap is designed to do basic geospatial mapping and visulization</li> <li>It is also designed to do basic image analysis for GeoTIFF images</li> <li>The target audience is anyone looking for a quick and simple geovisualization program with little coding.</li> <li>View the Installation tab to install and get started!</li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#some-of-the-features-of-fakemap-include","title":"Some of the features of fakemap include","text":"<ul> <li>Mapping in ipyleaflet and Folium</li> <li>The ability to add basemaps, geojons, shapefiles, and any kind of vector data in both ipyleaflet and Folium</li> <li>The ability to add images to the map through ipywidgets</li> <li>the ability to overlay raster images on the map</li> <li>The ability to display individual bands of a GeoTIFF</li> <li>The ability to create a basic spectral profile for the bands of a GeoTIFF</li> <li>The ability to print the metadata for a GeoTIFF  </li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>All features include a jupyter notebook that can be opened for a demonstration Click the examples tab to learn more and see the example notebooks.</li> </ul>"},{"location":"#youtube-tutorial-for-the-package","title":"Youtube tutorial for the package","text":"<ul> <li>watch this youtube video for some extra instruction</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v006-may-9-2023","title":"v0.0.6 - May 9, 2023","text":"<ul> <li>added geotiff functions</li> </ul>"},{"location":"changelog/#v005-april-27-2023","title":"v0.0.5 - April 27, 2023","text":"<ul> <li>Added toolbar for basemaps</li> </ul>"},{"location":"changelog/#v004-april-21-2023","title":"v0.0.4 - April 21, 2023","text":"<ul> <li>Added Add image and add raster  </li> </ul>"},{"location":"changelog/#v003-april-14-2023","title":"v0.0.3 - April 14, 2023","text":"<ul> <li>Added support for vector mapping  </li> </ul>"},{"location":"changelog/#v002-april-4-2023","title":"v0.0.2 - April 4, 2023","text":"<ul> <li>Added some functions and notebooks</li> </ul>"},{"location":"changelog/#v001-feb-21-2023","title":"v0.0.1 - Feb 21, 2023","text":"<ul> <li>Initial Release </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/MattAGUT/fakemap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>fakemap could always use more documentation, whether as part of the official fakemap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/MattAGUT/fakemap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up fakemap for local development.</p> <ol> <li> <p>Fork the fakemap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/fakemap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv fakemap\n$ cd fakemap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 fakemap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/MattAGUT/fakemap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"fakemap/","title":"fakemap module","text":"<p>Main module.</p>"},{"location":"fakemap/#fakemap.fakemap.Generate_random_location","title":"<code>Generate_random_location()</code>","text":"<p>Generates a Random Latitude and Longitude </p> Source code in <code>fakemap/fakemap.py</code> <pre><code>def Generate_random_location():\n    \"Generates a Random Latitude and Longitude \"\n    lat = random.uniform(-90, 90)\n    lon = random.uniform(-180, 180)\n\n    # Print the coordinates\n    print(\"Latitude: \", lat)\n    print(\"Longitude: \", lon)\n</code></pre>"},{"location":"fakemap/#fakemap.fakemap.add_marker_cluster","title":"<code>add_marker_cluster(csv_file)</code>","text":"<p>create a cluster from a csu</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>the path to the csv</p> required <p>Returns:</p> Type Description <code>Map</code> <p>Returns a map with the clusters</p> Source code in <code>fakemap/fakemap.py</code> <pre><code>def add_marker_cluster(csv_file):\n\"\"\"create a cluster from a csu\n\n    Args:\n        csv_file (str): the path to the csv\n\n    Returns:\n        Map: Returns a map with the clusters\n    \"\"\"\n    # read in CSV file\n    df = pd.read_csv(csv_file)\n\n    # create map\n    m = Map(center=(df['latitude'].mean(), df['longitude'].mean()), zoom=10)\n\n    # create marker cluster\n    marker_cluster = MarkerCluster(markers=[Marker(location=(row['latitude'], row['longitude'])) for index, row in df.iterrows()])\n\n    # add marker cluster to map\n    m.add_layer(marker_cluster)\n\n    # display map\n    return m\n</code></pre>"},{"location":"fakemap/#fakemap.fakemap.csv_to_shapefile","title":"<code>csv_to_shapefile(csv_file_path, output_folder_path)</code>","text":"<p>Convert a csv to a shapefile or geojson</p> <p>Parameters:</p> Name Type Description Default <code>csv_file_path</code> <code>str</code> <p>the path to the csv</p> required <code>output_folder_path</code> <code>str</code> <p>the path to the geojson</p> required Source code in <code>fakemap/fakemap.py</code> <pre><code>def csv_to_shapefile(csv_file_path, output_folder_path):\n\"\"\"Convert a csv to a shapefile or geojson\n\n    Args:\n        csv_file_path (str): the path to the csv\n        output_folder_path (str): the path to the geojson\n    \"\"\"\n    # Load CSV to geopandas DataFrame\n    df = gpd.read_file(csv_file_path)\n\n    # Convert latitude and longitude to geometry points\n    geometry = gpd.points_from_xy(df.longitude, df.latitude)\n\n    # Create new DataFrame with geometry points\n    gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n    # Output shapefile to file path\n    shapefile_path = output_folder_path + \"/output_shapefile.shp\"\n    gdf.to_file(shapefile_path, driver='ESRI Shapefile')\n\n    # Output GeoJSON to file path\n    geojson_path = output_folder_path + \"/output_geojson.geojson\"\n    gdf.to_file(geojson_path, driver='GeoJSON')\n</code></pre>"},{"location":"fakemap/#fakemap.fakemap.plot_pixel_spectral_profile","title":"<code>plot_pixel_spectral_profile(geotiff_path, pixel_x, pixel_y)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>path to the image</p> required <code>pixel_x</code> <code>int</code> <p>X location of pixel </p> required <code>pixel_y</code> <code>int</code> <p>y location of pixel</p> required Source code in <code>fakemap/fakemap.py</code> <pre><code>def plot_pixel_spectral_profile(geotiff_path, pixel_x, pixel_y):\n\"\"\"_summary_\n\n    Args:\n        geotiff_path (str): path to the image\n        pixel_x (int): X location of pixel \n        pixel_y (int): y location of pixel\n    \"\"\"\n    # Open the geotiff file in read mode\n    src = rasterio.open(geotiff_path)\n\n    # Read the pixel values and geometry using the pixel's location\n    pixel_values = src.read()[:, pixel_y, pixel_x]\n    pixel_geometry = src.transform * (pixel_x, pixel_y)\n\n    # Plot the spectral profile\n    fig, ax = plt.subplots()\n    ax.plot(src.indexes, pixel_values)\n    ax.set_xlabel('Band Index')\n    ax.set_ylabel('Pixel Reflectance')\n    ax.set_title('Pixel Spectral Profile')\n    plt.show()\n</code></pre>"},{"location":"fakemap/#fakemap.fakemap.print_geotiff_metadata","title":"<code>print_geotiff_metadata(filename)</code>","text":"<p>Displays available metadata for the image </p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>path to the image</p> required Source code in <code>fakemap/fakemap.py</code> <pre><code>def print_geotiff_metadata(filename):\n\"\"\"Displays available metadata for the image \n\n    Args:\n        filename (str): path to the image\n    \"\"\"\n    with rasterio.open(filename) as dataset:\n        print(f\"Metadata for GeoTIFF file: {filename}\")\n        print(f\"Width: {dataset.width}\")\n        print(f\"Height: {dataset.height}\")\n        print(f\"Number of bands: {dataset.count}\")\n        print(f\"Data type: {dataset.dtypes[0]}\")\n        print(f\"Coordinate reference system: {dataset.crs}\")\n        print(f\"Transform: \\n{dataset.transform}\")\n        print(f\"Bounds: {dataset.bounds}\")\n        print(f\"Metadata: {dataset.meta}\")\n</code></pre>"},{"location":"fakemap/#fakemap.fakemap.read_band","title":"<code>read_band(src, band)</code>","text":"<p>Reads the data from a band in a rasterio dataset</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>rasterio DatasetReader</code> <p>the rasterio dataset</p> required <code>band</code> <code>int</code> <p>the band number</p> required <p>Returns:</p> Type Description <code>data (numpy array)</code> <p>the data from the selected band band (int): the band number</p> Source code in <code>fakemap/fakemap.py</code> <pre><code>def read_band(src, band):\n\"\"\"Reads the data from a band in a rasterio dataset\n\n    Args:\n        src (rasterio DatasetReader): the rasterio dataset\n        band (int): the band number\n\n    Returns:\n        data (numpy array): the data from the selected band\n        band (int): the band number\n    \"\"\"\n    data = src.read(band)\n    return data, band\n</code></pre>"},{"location":"fakemap/#fakemap.fakemap.view_satellite_bands","title":"<code>view_satellite_bands(filename)</code>","text":"<p>Display images of the satellite bands</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>the path to the image</p> required Source code in <code>fakemap/fakemap.py</code> <pre><code>def view_satellite_bands(filename):\n\"\"\"Display images of the satellite bands\n\n    Args:\n        filename (str): the path to the image\n    \"\"\"\n    with rasterio.open(filename) as dataset:\n        # loop through each band and plot separately\n        for i in range(1, dataset.count+1):\n            band = dataset.read(i)\n            plt.imshow(band)\n            plt.title(\"Band {}\".format(i))\n            plt.show()  \n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliummap/","title":"foliummap module","text":""},{"location":"foliummap/#fakemap.foliummap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <p>Creates a map in Folium </p> required Source code in <code>fakemap/foliummap.py</code> <pre><code>class Map(folium.Map):\n\"\"\" Create a folium map object.\n\n    Args:\n        folium: Creates a map in Folium \n    \"\"\"\n    def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n\"\"\"\n\n        Args:\n            center (list, optional): The Map Center. Defaults to [20,0].\n            zoom (int, optional): Sets the zoom level of the map. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, attribution = \"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer\n            attribution (str, optional): The attribution of the tile layer. Defaults to **\n            \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles= url,\n            name = name,\n            attr = attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a basemap to the map\n\n        Args:\n            basemap: The basemap to add\n\n        Raises:\n            ValueError: Incorrect Basemap\n        \"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == 'roadmap':\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs ) \n        elif basemap.lower() == 'satellite':\n            url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution \n                self.add_tile_layer(url, name =basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found\")\n\n    def add_geojson(self, data, name=\"GeoJSON\", **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n            \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = folium.GeoJson(data=data, name=name,**kwargs)\n        geojson.add_to(self)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n        Args:\n            data (str): the path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_vector(self, data, name = 'Vector Data', **kwargs):\n\"\"\"Adds Vector Data to the map.\n\n        Args:\n            data (str): the path to the Vector Data\n            \"\"\"\n        import geopandas as gdp\n        gdf = gdp.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"foliummap/#fakemap.foliummap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The Map Center. Defaults to [20,0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Sets the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>fakemap/foliummap.py</code> <pre><code>def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n\"\"\"\n\n    Args:\n        center (list, optional): The Map Center. Defaults to [20,0].\n        zoom (int, optional): Sets the zoom level of the map. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliummap/#fakemap.foliummap.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a basemap to the map</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <p>The basemap to add</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>Incorrect Basemap</p> Source code in <code>fakemap/foliummap.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a basemap to the map\n\n    Args:\n        basemap: The basemap to add\n\n    Raises:\n        ValueError: Incorrect Basemap\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == 'roadmap':\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs ) \n    elif basemap.lower() == 'satellite':\n        url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution \n            self.add_tile_layer(url, name =basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found\")\n</code></pre>"},{"location":"foliummap/#fakemap.foliummap.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required Source code in <code>fakemap/foliummap.py</code> <pre><code>def add_geojson(self, data, name=\"GeoJSON\", **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n        \"\"\"\n\n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = folium.GeoJson(data=data, name=name,**kwargs)\n    geojson.add_to(self)\n</code></pre>"},{"location":"foliummap/#fakemap.foliummap.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>the path to the Shapefile.</p> required Source code in <code>fakemap/foliummap.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): the path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"foliummap/#fakemap.foliummap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to **</p> <code>''</code> Source code in <code>fakemap/foliummap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution = \"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer\n        attribution (str, optional): The attribution of the tile layer. Defaults to **\n        \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles= url,\n        name = name,\n        attr = attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"foliummap/#fakemap.foliummap.Map.add_vector","title":"<code>add_vector(self, data, name='Vector Data', **kwargs)</code>","text":"<p>Adds Vector Data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>the path to the Vector Data</p> required Source code in <code>fakemap/foliummap.py</code> <pre><code>def add_vector(self, data, name = 'Vector Data', **kwargs):\n\"\"\"Adds Vector Data to the map.\n\n    Args:\n        data (str): the path to the Vector Data\n        \"\"\"\n    import geopandas as gdp\n    gdf = gdp.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install fakemap, run this command in your terminal:</p> <pre><code>pip install fakemap\n</code></pre> <p>This is the preferred method to install fakemap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-pypi","title":"From PyPi","text":"<p>fakemap is on pypi to install simply run this command in the teminal</p> <pre><code>pip install fakemap\n</code></pre>"},{"location":"installation/#from-conda-forge","title":"From Conda-forge","text":"<p>Unfortunately fakemap is not avaliable to download from conda-forge. Maybe one day.</p>"},{"location":"installation/#from-github","title":"From GitHub","text":"<p>The sources for fakemap can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/MattAGUT/fakemap\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use fakemap in a project:</p> <pre><code>import fakemap\n</code></pre>"},{"location":"examples/AddingImages/","title":"AddingImages","text":"In\u00a0[1]: Copied! <pre>#! pip install fakemap\n</pre> #! pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>m = fakemap.Map( center = [20, -100], zoom = 2)\n</pre> m = fakemap.Map( center = [20, -100], zoom = 2) In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]: In\u00a0[5]: Copied! <pre>#add image from any url\nm.add_image( url= 'https://www.utk.edu/images/chrome/logo-horizontal-left-smokey.svg', width ='100', height='100', position = 'bottomleft')\n</pre> #add image from any url m.add_image( url= 'https://www.utk.edu/images/chrome/logo-horizontal-left-smokey.svg', width ='100', height='100', position = 'bottomleft') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 2\n      1 #add image from any url\n----&gt; 2 m.add_image( url= 'https://www.utk.edu/images/chrome/logo-horizontal-left-smokey.svg', width ='100', height='100', position = 'bottomleft')\n\nAttributeError: 'Map' object has no attribute 'add_image'</pre>"},{"location":"examples/ExamplesforRealWorldApplication/","title":"ExamplesforRealWorldApplication","text":"In\u00a0[1]: Copied! <pre>#pip install fakemap\n</pre> #pip install fakemap In\u00a0[2]: Copied! <pre>#you can use fakemap to do a basic image analysis for a GeoTIFF\n</pre> #you can use fakemap to do a basic image analysis for a GeoTIFF In\u00a0[3]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[4]: Copied! <pre>fakemap.view_satellite_bands(\"Sample/KnoxvilleTest.tif\")\n</pre> fakemap.view_satellite_bands(\"Sample/KnoxvilleTest.tif\") In\u00a0[5]: Copied! <pre>fakemap.plot_pixel_spectral_profile(\"Sample/KnoxvilleTest.tif\", 100, 100)\n</pre> fakemap.plot_pixel_spectral_profile(\"Sample/KnoxvilleTest.tif\", 100, 100) In\u00a0[6]: Copied! <pre>fakemap.print_geotiff_metadata(\"Sample/KnoxvilleTest.tif\")\n</pre> fakemap.print_geotiff_metadata(\"Sample/KnoxvilleTest.tif\") <pre>Metadata for GeoTIFF file: Sample/KnoxvilleTest.tif\nWidth: 7851\nHeight: 7971\nNumber of bands: 3\nData type: uint8\nCoordinate reference system: EPSG:32617\nTransform: \n| 30.00, 0.00, 117285.00|\n| 0.00,-30.00, 4111815.00|\n| 0.00, 0.00, 1.00|\nBounds: BoundingBox(left=117285.0, bottom=3872685.0, right=352815.0, top=4111815.0)\nMetadata: {'driver': 'GTiff', 'dtype': 'uint8', 'nodata': None, 'width': 7851, 'height': 7971, 'count': 3, 'crs': CRS.from_epsg(32617), 'transform': Affine(30.0, 0.0, 117285.0,\n       0.0, -30.0, 4111815.0)}\n</pre> In\u00a0[7]: Copied! <pre>#with fakemap a basic analysis of a geotiff is preformed in seconds with little to no coding needed\n</pre> #with fakemap a basic analysis of a geotiff is preformed in seconds with little to no coding needed"},{"location":"examples/FoliumMappingLab7/","title":"FoliumMappingLab7","text":"In\u00a0[1]: Copied! <pre>#! pip install fakemap\n</pre> #! pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap.foliummap as fakemap\n</pre> import fakemap.foliummap as fakemap In\u00a0[3]: Copied! <pre>m = fakemap.Map(center=[40,-80], zoom=2)\n</pre> m = fakemap.Map(center=[40,-80], zoom=2)  In\u00a0[4]: Copied! <pre>#you can add any basemap you want from xyz services, or URL.\nm.add_basemap( 'Roadmap', attribution= 'Google')\n</pre> #you can add any basemap you want from xyz services, or URL. m.add_basemap( 'Roadmap', attribution= 'Google') In\u00a0[5]: Copied! <pre>#you can add any geojson.\nm.add_geojson('Sample/map.geojson', name = 'counties')\n</pre> #you can add any geojson. m.add_geojson('Sample/map.geojson', name = 'counties') In\u00a0[6]: Copied! <pre>#you can add any shapefile, from local file or URL\nm.add_shp('Sample/counties.zip', name='Counties')\n</pre> #you can add any shapefile, from local file or URL m.add_shp('Sample/counties.zip', name='Counties') In\u00a0[7]: Copied! <pre>#you can add any vector data\nm.add_vector('Sample/map (1).geojson')\n</pre> #you can add any vector data m.add_vector('Sample/map (1).geojson') In\u00a0[8]: Copied! <pre>m\n</pre> m Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/Lab9Adddropdown/","title":"Lab9Adddropdown","text":"In\u00a0[1]: Copied! <pre>#!pip install fakemap\n</pre> #!pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>m = fakemap.Map( center= [20,-100], zoom=2)\n</pre> m = fakemap.Map( center= [20,-100], zoom=2) In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]: In\u00a0[5]: Copied! <pre># you can add a toolbar to easily switch between basemaps\nm.add_toolbar()\n</pre> # you can add a toolbar to easily switch between basemaps m.add_toolbar() <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 2\n      1 # you can add a toolbar to easily switch between basemaps\n----&gt; 2 m.add_toolbar()\n\nAttributeError: 'Map' object has no attribute 'add_toolbar'</pre>"},{"location":"examples/MapingGeoTIFFS/","title":"MapingGeoTIFFS","text":"In\u00a0[1]: Copied! <pre>#! pip install fakemap\n</pre> #! pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>fakemap.view_satellite_bands(\"Sample/KnoxvilleTest.tif\")\n</pre> fakemap.view_satellite_bands(\"Sample/KnoxvilleTest.tif\") In\u00a0[4]: Copied! <pre># from here you can save the image, copy it,or expand it\n</pre> # from here you can save the image, copy it,or expand it"},{"location":"examples/MetadataGeoTIFF/","title":"MetadataGeoTIFF","text":"In\u00a0[1]: Copied! <pre>#!pip install fakemap\n</pre> #!pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>fakemap.print_geotiff_metadata(\"Sample/KnoxvilleTest.tif\")\n</pre> fakemap.print_geotiff_metadata(\"Sample/KnoxvilleTest.tif\") <pre>Metadata for GeoTIFF file: Sample/KnoxvilleTest.tif\nWidth: 7851\nHeight: 7971\nNumber of bands: 3\nData type: uint8\nCoordinate reference system: EPSG:32617\nTransform: \n| 30.00, 0.00, 117285.00|\n| 0.00,-30.00, 4111815.00|\n| 0.00, 0.00, 1.00|\nBounds: BoundingBox(left=117285.0, bottom=3872685.0, right=352815.0, top=4111815.0)\nMetadata: {'driver': 'GTiff', 'dtype': 'uint8', 'nodata': None, 'width': 7851, 'height': 7971, 'count': 3, 'crs': CRS.from_epsg(32617), 'transform': Affine(30.0, 0.0, 117285.0,\n       0.0, -30.0, 4111815.0)}\n</pre>"},{"location":"examples/MoreRealWorldExamples/","title":"MoreRealWorldExamples","text":"In\u00a0[1]: Copied! <pre>#you can also use fakemap to do some basic Geovisualization\n</pre> #you can also use fakemap to do some basic Geovisualization In\u00a0[2]: Copied! <pre>#!pip install fakemap\n</pre> #!pip install fakemap In\u00a0[3]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[4]: Copied! <pre>m = fakemap.Map(center= [29.706043,-91.206917], zoom= 11)\n</pre> m = fakemap.Map(center= [29.706043,-91.206917], zoom= 11) In\u00a0[5]: Copied! <pre>m.add_basemap(\"Esri.WorldImagery\")\n</pre> m.add_basemap(\"Esri.WorldImagery\") <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 m.add_basemap(\"Esri.WorldImagery\")\n\nAttributeError: 'Map' object has no attribute 'add_basemap'</pre> In\u00a0[6]: Copied! <pre>m.add_geojson(\"Sample/studyarea.geojson\")\n</pre> m.add_geojson(\"Sample/studyarea.geojson\") <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 m.add_geojson(\"Sample/studyarea.geojson\")\n\nAttributeError: 'Map' object has no attribute 'add_geojson'</pre> In\u00a0[7]: Copied! <pre>m\n</pre> m Out[7]: In\u00a0[8]: Copied! <pre>#this is the study area for a project that I worked on in the past\n</pre> #this is the study area for a project that I worked on in the past In\u00a0[9]: Copied! <pre>#you can also map in folium with similar functionality\n#fakemap can be used in a variety of way and combinations much more than has been shown in this example\n</pre> #you can also map in folium with similar functionality #fakemap can be used in a variety of way and combinations much more than has been shown in this example"},{"location":"examples/SpectralProfiles/","title":"SpectralProfiles","text":"In\u00a0[1]: Copied! <pre>#!pip install fakemap\n</pre> #!pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>fakemap.plot_pixel_spectral_profile(\"Sample/LA2014.tif\", 100, 500)\n</pre> fakemap.plot_pixel_spectral_profile(\"Sample/LA2014.tif\", 100, 500) In\u00a0[4]: Copied! <pre>#you can download the image,copy it, or expand it.\n</pre> #you can download the image,copy it, or expand it."},{"location":"examples/Test/","title":"Test","text":"In\u00a0[1]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[2]: Copied! <pre>fakemap.Generate_random_location()\n</pre> fakemap.Generate_random_location() <pre>Latitude:  25.985731213811874\nLongitude:  -65.94984432007692\n</pre> In\u00a0[3]: Copied! <pre>m = fakemap.Map(center=[32.17510113838316,61.95572134200921],zoom =10 )\n</pre> m = fakemap.Map(center=[32.17510113838316,61.95572134200921],zoom =10 )  In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[5]: Copied! <pre>fakemap.view_satellite_bands(\"Sample/KnoxvilleTest.tif\")\n</pre> fakemap.view_satellite_bands(\"Sample/KnoxvilleTest.tif\") In\u00a0[6]: Copied! <pre>fakemap.plot_spectral_profiles(\"Sample/LA2014.tif\")\n</pre> fakemap.plot_spectral_profiles(\"Sample/LA2014.tif\") <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 fakemap.plot_spectral_profiles(\"Sample/LA2014.tif\")\n\nAttributeError: module 'fakemap' has no attribute 'plot_spectral_profiles'</pre> In\u00a0[7]: Copied! <pre>fakemap.print_geotiff_metadata(\"Sample/LA2014.tif\")\n</pre> fakemap.print_geotiff_metadata(\"Sample/LA2014.tif\") <pre>Metadata for GeoTIFF file: Sample/LA2014.tif\nWidth: 7531\nHeight: 7691\nNumber of bands: 3\nData type: uint8\nCoordinate reference system: EPSG:32615\nTransform: \n| 30.00, 0.00, 662685.00|\n| 0.00,-30.00, 3471015.00|\n| 0.00, 0.00, 1.00|\nBounds: BoundingBox(left=662685.0, bottom=3240285.0, right=888615.0, top=3471015.0)\nMetadata: {'driver': 'GTiff', 'dtype': 'uint8', 'nodata': None, 'width': 7531, 'height': 7691, 'count': 3, 'crs': CRS.from_epsg(32615), 'transform': Affine(30.0, 0.0, 662685.0,\n       0.0, -30.0, 3471015.0)}\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[8]: Copied! <pre>m = fakemap.Map( center = [20, -100], zoom = 2)\n</pre> m = fakemap.Map( center = [20, -100], zoom = 2) In\u00a0[9]: Copied! <pre>m\n</pre> m Out[9]: In\u00a0[10]: Copied! <pre># m.add_image( url= 'https://www.utk.edu/images/chrome/logo-horizontal-left-smokey.svg', width ='100', height='100', position = 'bottomleft')\n</pre> # m.add_image( url= 'https://www.utk.edu/images/chrome/logo-horizontal-left-smokey.svg', width ='100', height='100', position = 'bottomleft') In\u00a0[11]: Copied! <pre>m.add_toolbar()\n</pre> m.add_toolbar() <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 m.add_toolbar()\n\nAttributeError: 'Map' object has no attribute 'add_toolbar'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[12]: Copied! <pre>m = fakemap.Map(fullscreen_control = False)\nm\n</pre> m = fakemap.Map(fullscreen_control = False) m Out[12]: In\u00a0[13]: Copied! <pre>m.add_shp('Sample/counties.zip', name='Counties')\n</pre> m.add_shp('Sample/counties.zip', name='Counties') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 m.add_shp('Sample/counties.zip', name='Counties')\n\nAttributeError: 'Map' object has no attribute 'add_shp'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[14]: Copied! <pre>m.add_basemap('Esri.WorldImagery')\n</pre> m.add_basemap('Esri.WorldImagery') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 m.add_basemap('Esri.WorldImagery')\n\nAttributeError: 'Map' object has no attribute 'add_basemap'</pre> In\u00a0[15]: Copied! <pre>m.add_basemap(\"ROADMAP\")\n</pre> m.add_basemap(\"ROADMAP\") <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[15], line 1\n----&gt; 1 m.add_basemap(\"ROADMAP\")\n\nAttributeError: 'Map' object has no attribute 'add_basemap'</pre> In\u00a0[16]: Copied! <pre>m.add_basemap('satellite')\n</pre> m.add_basemap('satellite') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[16], line 1\n----&gt; 1 m.add_basemap('satellite')\n\nAttributeError: 'Map' object has no attribute 'add_basemap'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[17]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z} '\n</pre> url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z} ' In\u00a0[18]: Copied! <pre>m.add_tile_layer(url = url, name = 'Google Maps', attribution= 'Google')\n</pre> m.add_tile_layer(url = url, name = 'Google Maps', attribution= 'Google') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[18], line 1\n----&gt; 1 m.add_tile_layer(url = url, name = 'Google Maps', attribution= 'Google')\n\nAttributeError: 'Map' object has no attribute 'add_tile_layer'</pre> In\u00a0[19]: Copied! <pre>m.add_shp('https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_500k.zip', name = 'counties')\n</pre> m.add_shp('https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_500k.zip', name = 'counties') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[19], line 1\n----&gt; 1 m.add_shp('https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_500k.zip', name = 'counties')\n\nAttributeError: 'Map' object has no attribute 'add_shp'</pre> In\u00a0[20]: Copied! <pre>m.add_geojson('Sample/map.geojson', name = 'States')\n</pre> m.add_geojson('Sample/map.geojson', name = 'States') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[20], line 1\n----&gt; 1 m.add_geojson('Sample/map.geojson', name = 'States')\n\nAttributeError: 'Map' object has no attribute 'add_geojson'</pre> In\u00a0[21]: Copied! <pre>import fakemap.folium as fakemap\n</pre> import fakemap.folium as fakemap <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[21], line 1\n----&gt; 1 import fakemap.folium as fakemap\n\nModuleNotFoundError: No module named 'fakemap.folium'</pre> In\u00a0[22]: Copied! <pre>m = fakemap.Map(fullscreen_control = False)\n</pre> m = fakemap.Map(fullscreen_control = False) In\u00a0[23]: Copied! <pre>m\n</pre> m Out[23]: In\u00a0[24]: Copied! <pre>import fakemap.foliummap as fakemap\n</pre> import fakemap.foliummap as fakemap In\u00a0[25]: Copied! <pre>m = fakemap.Map(center=[40,-80], zoom=3)\n</pre> m = fakemap.Map(center=[40,-80], zoom=3)  In\u00a0[26]: Copied! <pre>m.add_basemap( 'Roadmap', attribution= 'Google')\n</pre> m.add_basemap( 'Roadmap', attribution= 'Google') In\u00a0[27]: Copied! <pre>m.add_geojson('Sample/map.geojson', name = 'counties')\n</pre> m.add_geojson('Sample/map.geojson', name = 'counties') In\u00a0[28]: Copied! <pre>m.add_shp('Sample/counties.zip', name='Counties')\n</pre> m.add_shp('Sample/counties.zip', name='Counties') In\u00a0[29]: Copied! <pre>m\n</pre> m Out[29]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/fakemap/","title":"Fakemap","text":"In\u00a0[1]: Copied! <pre># !pip install fakemap\n</pre> # !pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>m = fakemap.Map(center = [40,-100], zoom = 4)\nm.add_search_control()\nm.add_draw_control()\nm\n</pre> m = fakemap.Map(center = [40,-100], zoom = 4) m.add_search_control() m.add_draw_control() m  <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[3], line 2\n      1 m = fakemap.Map(center = [40,-100], zoom = 4)\n----&gt; 2 m.add_search_control()\n      3 m.add_draw_control()\n      4 m\n\nAttributeError: 'Map' object has no attribute 'add_search_control'</pre> In\u00a0[4]: Copied! <pre>fakemap.Generate_random_location()\n</pre> fakemap.Generate_random_location() <pre>Latitude:  7.2162928899773675\nLongitude:  91.71064358850282\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/finalexamexamples/","title":"Finalexamexamples","text":"In\u00a0[1]: Copied! <pre>#!pip install fakemap\n</pre> #!pip install fakemap  In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>fakemap.csv_to_shapefile(\"Sample/world_cities.csv\",\"Sample\")\n</pre> fakemap.csv_to_shapefile(\"Sample/world_cities.csv\",\"Sample\") In\u00a0[4]: Copied! <pre>fakemap.add_marker_cluster(\"Sample/world_cities.csv\")\n</pre> fakemap.add_marker_cluster(\"Sample/world_cities.csv\") Out[4]: In\u00a0[5]: Copied! <pre>fakemap.createMarkerClusterToolbar()\n</pre> fakemap.createMarkerClusterToolbar() <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 fakemap.createMarkerClusterToolbar()\n\nTypeError: createMarkerClusterToolbar() missing 2 required positional arguments: 'map' and 'csvData'</pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>#! pip install fakemap\n</pre> #! pip install fakemap In\u00a0[2]: Copied! <pre>import folium\n</pre> import folium  In\u00a0[3]: Copied! <pre>m = folium.Map(location=[45.5236, -122.6750])\nm\n</pre> m = folium.Map(location=[45.5236, -122.6750]) m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre># !pip install fakemap\n</pre> # !pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>fakemap.Generate_random_location()\n</pre> fakemap.Generate_random_location() <pre>Latitude:  -0.31400729574640707\nLongitude:  -121.20627115841228\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre># !pip install fakemap\n</pre> # !pip install fakemap In\u00a0[2]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles In\u00a0[3]: Copied! <pre>m = Map(\n    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> m = Map(     basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),     center=(52.204793, 360.121558),     zoom=4 )  m Out[3]:"},{"location":"examples/ipyleafletmappingLab7/","title":"ipyleafletmappingLab7","text":"In\u00a0[1]: Copied! <pre>#! pip install fakemap\n</pre> #! pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>m=fakemap.Map(center = [20,-40], zoom=2)\n</pre> m=fakemap.Map(center = [20,-40], zoom=2) In\u00a0[4]: Copied! <pre># import any basemap from xyz services or URL\nm.add_basemap('Esri.WorldImagery')\n</pre> # import any basemap from xyz services or URL m.add_basemap('Esri.WorldImagery') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[4], line 2\n      1 # import any basemap from xyz services or URL\n----&gt; 2 m.add_basemap('Esri.WorldImagery')\n\nAttributeError: 'Map' object has no attribute 'add_basemap'</pre> In\u00a0[5]: Copied! <pre># add any geojson\nm.add_geojson('Sample/map.geojson')\n</pre> # add any geojson m.add_geojson('Sample/map.geojson') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 2\n      1 # add any geojson\n----&gt; 2 m.add_geojson('Sample/map.geojson')\n\nAttributeError: 'Map' object has no attribute 'add_geojson'</pre> In\u00a0[6]: Copied! <pre>#add any shapefile from local or URL\nm.add_shp('Sample/counties.zip')\n</pre> #add any shapefile from local or URL m.add_shp('Sample/counties.zip') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[6], line 2\n      1 #add any shapefile from local or URL\n----&gt; 2 m.add_shp('Sample/counties.zip')\n\nAttributeError: 'Map' object has no attribute 'add_shp'</pre> In\u00a0[7]: Copied! <pre>#add any kind of vector data\nm.add_vector('https://stacks.stanford.edu/file/druid:wb529sv5690/data.zip')\n</pre> #add any kind of vector data m.add_vector('https://stacks.stanford.edu/file/druid:wb529sv5690/data.zip') <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[7], line 2\n      1 #add any kind of vector data\n----&gt; 2 m.add_vector('https://stacks.stanford.edu/file/druid:wb529sv5690/data.zip')\n\nAttributeError: 'Map' object has no attribute 'add_vector'</pre> In\u00a0[8]: Copied! <pre>m\n</pre> m Out[8]:"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>#! pip install fakemap\n</pre> #! pip install fakemap In\u00a0[2]: Copied! <pre>import fakemap\n</pre> import fakemap In\u00a0[3]: Copied! <pre>m=fakemap.Map([20,-40], zoom=2)\nm\n</pre> m=fakemap.Map([20,-40], zoom=2) m <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 m=fakemap.Map([20,-40], zoom=2)\n      2 m\n\nTypeError: __init__() takes 1 positional argument but 2 were given</pre> In\u00a0[4]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[5]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 m.add_raster(url)\n\nNameError: name 'm' is not defined</pre> In\u00a0[6]: Copied! <pre>url2 =('https://github.com/opengeos/data/blob/main/raster/landsat7.tif?raw=true')\n</pre> url2 =('https://github.com/opengeos/data/blob/main/raster/landsat7.tif?raw=true') In\u00a0[7]: Copied! <pre>m.add_raster(url2)\n</pre> m.add_raster(url2) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 m.add_raster(url2)\n\nNameError: name 'm' is not defined</pre>"}]}